"use client";

import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { ArrowRight, Radar } from "lucide-react";

gsap.registerPlugin(ScrollTrigger);

export function EvolutionSection() {
  const containerRef = useRef<HTMLDivElement>(null);
  const timelineRef = useRef<HTMLDivElement>(null);
  const elementsRef = useRef<(HTMLDivElement | null)[]>([]);
  const fireworksRef = useRef<HTMLDivElement>(null); // Ref para os fogos de artif√≠cio
  const progressCounterRef = useRef<HTMLDivElement>(null); // Ref para o contador de progresso
  const progressBackgroundRef = useRef<HTMLDivElement>(null); // Ref para o background de progresso

  const evolutionData = [
    {
      year: "Fase 1",
      label: "Localiz√ß√£o",
      details: "Entender onde a empresa se encontra.",
      metrics: "Baixa efici√™ncia nos processos.",
      icon: <Radar className="w-8 h-8 text-white" />
    },
    {
      year: "Fase 2",
      label: "Diagn√≥stico",
      details: "Encontrar os problemas que est√£o fazendo a empresa n√£o ter lucro.",
      metrics: "Pesquisa de solu√ß√µes no mercado.",
      icon: "üìà"
    },
    {
      year: "Fase 3",
      label: "Prontu√°rio",
      details: "Aplicar as medidas para corre√ß√£o dos problemas.",
      metrics: "Sistema implementado rapidamente.",
      icon: "‚öôÔ∏è"
    },
    {
      year: "Fase 4",
      label: "Otimiza√ß√£o",
      details: "Otimiza√ß√£o e automa√ß√£o de processos manuais.",
      metrics: "Redu√ß√£o de 30% nos desperd√≠cios.",
      icon: "‚è≥"
    },
    {
      year: "Fase 5",
      label: "Dire√ß√£o",
      details: "Dar a dire√ß√£o para seguir com os novos procedimentos definidos.",
      metrics: "Aumento de 40% na produtividade.",
      icon: "üß≠"
    },
    {
      year: "Fase 6",
      label: "Monitoramento",
      details: "Acompanhar as medidas tomadas e os resultados obitidos.",
      metrics: "+50 empresas atendidas.",
      icon: "üöÄ"
    }
  ];

  useEffect(() => {
    if (!containerRef.current || !timelineRef.current) return;

    // Fun√ß√£o que dispara a anima√ß√£o de fogos de artif√≠cio
    const launchFireworks = () => {
      if (!fireworksRef.current) return;
      for (let i = 0; i < 100; i++) {
        const particle = document.createElement("div");
        particle.className = "absolute w-2 h-2 rounded-full bg-white";
        particle.style.top = "50%";
        particle.style.left = "50%";
        particle.style.transform = "translate(-50%, -50%)";
        fireworksRef.current.appendChild(particle);

        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 80 + 30;

        gsap.fromTo(
          particle,
          { opacity: 1, x: 0, y: 0, scale: 1 },
          {
            x: Math.cos(angle) * distance,
            y: Math.sin(angle) * distance,
            opacity: 0,
            scale: 0,
            duration: 0.1,
            ease: "power1.out",
            onComplete: () => particle.remove()
          }
        );
      }
    };

    const ctx = gsap.context(() => {
      // Timeline principal com ScrollTrigger
      const mainTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: containerRef.current,
          start: "top top",
          end: "+=300%",
          pin: true,
          pinSpacing: true,
          scrub: 1,
          anticipatePin: 1
        }
      });

      // Anima√ß√£o da linha base do timeline
      mainTimeline.fromTo(
        timelineRef.current,
        { width: "0%", opacity: 0 },
        { width: "100%", opacity: 1, duration: 2.5, ease: "power2.out" }
      );

      // Anima√ß√£o espec√≠fica para mobile
      if (window.innerWidth < 768) {
        mainTimeline.fromTo(
          ".timeline-container",
          { x: "100%", opacity: 0, scale: 0.8 },
          { x: "0%", opacity: 1, scale: 1, duration: 2, ease: "elastic.out(1, 0.75)" },
          "<"
        );
      }

      // Anima√ß√£o dos elementos da evolu√ß√£o (cada fase)
      elementsRef.current.forEach((element, index) => {
        if (!element) return;
        mainTimeline.fromTo(
          element,
          { opacity: 0, x: window.innerWidth < 768 ? 100 : -100, scale: 0.8, rotateY: -30 },
          { opacity: 1, x: 0, scale: 1, rotateY: 0, duration: 1.5, ease: "power3.out" },
          index === 0 ? ">" : ">-0.6"
        );
        // Anima√ß√£o sutil no hover
        gsap.to(element, {
          y: -10,
          scale: 1.05,
          duration: 1,
          repeat: -1,
          yoyo: true,
          ease: "power1.inOut",
          paused: true
        });
        // Efeito de brilho: aumenta e depois retorna o brilho para o normal
        const phaseText = element.querySelector('.phase-text');
        if (phaseText) {
          const shineTl = gsap.timeline();
          shineTl.to(phaseText, { filter: "brightness(1.8)", duration: 0.5, ease: "power1.inOut" })
                 .to(phaseText, { filter: "brightness(1)", duration: 0.5, ease: "power1.inOut" });
          mainTimeline.add(shineTl, index === 0 ? ">" : ">-0.3");
        }
      });

      // Dispara os fogos de artif√≠cio junto com a √∫ltima anima√ß√£o
      mainTimeline.add(() => {
        launchFireworks();
      }, ">-0.6");

      // Atualiza o contador e o background de progresso conforme a rolagem
      gsap.to({}, {
        scrollTrigger: {
          trigger: containerRef.current,
          start: "top top",
          end: "+=300%",
          scrub: true,
          onUpdate: self => {
            const progress = self.progress;
            if (progressCounterRef.current) {
              progressCounterRef.current.innerText = `${Math.round(progress * 100)}% Conclu√≠do`;
            }
            if (progressBackgroundRef.current) {
              // O background √© preenchido de baixo para cima
              progressBackgroundRef.current.style.height = `${progress * 100}%`;
            }
          }
        }
      });
    }, containerRef);

    // Reconfigura a anima√ß√£o ao redimensionar a janela
    const handleResize = () => {
      ctx.revert();
      if (containerRef.current && timelineRef.current) {
        ctx.add(() => {
          const mainTimeline = gsap.timeline({
            scrollTrigger: {
              trigger: containerRef.current,
              start: "top top",
              end: "+=300%",
              pin: true,
              pinSpacing: true,
              scrub: 1,
              anticipatePin: 1
            }
          });
          // Reaplicar as anima√ß√µes conforme necess√°rio...
        });
      }
    };

    window.addEventListener("resize", handleResize);
    return () => {
      ctx.revert();
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <section
      ref={containerRef}
      className="relative min-h-screen bg-gradient-to-br from-gray-950/95 via-gray-950 to-gray-950 py-20 overflow-hidden"
    >
      {/* Background de preenchimento de progresso */}
      <div
        ref={progressBackgroundRef}
        className="absolute bottom-0 left-0 w-full bg-blue-500 opacity-20 z-0"
        style={{ height: "0%" }}
      ></div>

      <div className="relative z-10 container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-200 via-blue-400 to-purple-200 bg-clip-text text-transparent">
            Nossa Evolu√ß√£o
          </h2>
          <p className="mt-4 text-lg text-blue-200/90">
            Uma jornada de inova√ß√£o e excel√™ncia no mercado de ERP industrial
          </p>
          {/* Contador de progresso posicionado abaixo do par√°grafo */}
          <div
            ref={progressCounterRef}
            className="mt-4 text-white font-bold text-xl"
          >
            0% Conclu√≠do
          </div>
        </div>

        <div className="relative max-w-7xl mx-auto overflow-x-hidden">
          {/* Timeline horizontal principal */}
          <div className="flex items-center justify-center relative h-[600px]">
            {/* Linha base do timeline */}
            <div
              ref={timelineRef}
              className="absolute h-1.5 bg-gradient-to-r from-blue-200 via-blue-400 to-blue-600 w-full shadow-[0_0_20px_rgba(59,130,246,0.6)] blur-[0.5px]"
            />

            {/* Itens do timeline */}
            <div className="relative w-full flex justify-between items-center px-12">
              {evolutionData.map((item, index) => (
                <div
                  key={index}
                  ref={el => (elementsRef.current[index] = el)}
                  className="relative"
                  style={{ flex: "1" }}
                >
                  {/* Linhas de conex√£o verticais */}
                  {index % 2 === 0 ? (
                    <div
                      className="absolute left-1/2 transform -translate-x-1/2 w-0.5 bg-blue-400/20"
                      style={{ height: "120px", bottom: "100%" }}
                    />
                  ) : (
                    <div
                      className="absolute left-1/2 transform -translate-x-1/2 w-0.5 bg-blue-400/20"
                      style={{ height: "150px", bottom: "100%" }}
                    />
                  )}
                  {index % 2 === 0 ? (
                    <div
                      className="absolute left-1/2 transform -translate-x-1/2 w-0.5 bg-blue-400/20"
                      style={{ height: "150px", top: "100%" }}
                    />
                  ) : (
                    <div
                      className="absolute left-1/2 transform -translate-x-1/2 w-0.5 bg-blue-400/20"
                      style={{ height: "120px", top: "100%" }}
                    />
                  )}

                  {/* Caixa de conte√∫do com classe para efeito de brilho */}
                  <div
                    className={`phase-text absolute w-56 left-1/2 transform -translate-x-1/2 ${
                      index % 2 === 0 ? "-top-[250px]" : "top-[110px]"
                    }`}
                  >
                    <div
                      className="bg-blue-950/60 backdrop-blur-sm rounded-lg p-4 shadow-lg hover:bg-blue-900/60 transition-colors duration-300 border border-blue-500/20"
                      style={{
                        opacity: 0.8 + index * 0.1,
                        transform: `scale(${0.9 + index * 0.03})`
                      }}
                    >
                      <span className="text-blue-300 font-bold">{item.year}</span>
                      <h3 className="text-white font-bold mt-1">{item.label}</h3>
                      <p className="text-blue-200/90 text-sm mt-2">{item.details}</p>
                    </div>
                  </div>

                  {/* Setas na timeline */}
                  <div className="absolute left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                    <div
                      className="w-14 h-14 rounded-full shadow-[0_0_25px_rgba(59,130,246,0.5)] hover:shadow-[0_0_35px_rgba(59,130,246,0.7)] hover:scale-110 transition-all duration-300 flex items-center justify-center"
                      style={{
                        opacity: 0.8 + index * 0.08,
                        background: `linear-gradient(to left, rgb(37, 99, 235) ${
                          (index * 100) / 5
                        }%, rgb(96, 165, 250) ${((index + 1) * 100) / 5}%, rgb(191, 219, 254) ${((index + 2) * 100) / 5}%)`
                      }}
                    >
                      <ArrowRight className="w-8 h-8 text-white" />
                    </div>
                  </div>

                  {/* Caixa do √≠cone */}
                  <div
                    className={`absolute left-1/2 transform -translate-x-1/2 ${
                      index % 2 === 0 ? "top-[150px]" : "-top-[210px]"
                    }`}
                  >
                    <div
                      className="w-20 h-20 rounded-full flex items-center justify-center text-3xl shadow-[0_0_30px_rgba(59,130,246,0.4)] hover:shadow-[0_0_40px_rgba(59,130,246,0.6)] hover:scale-115 transition-all duration-300 relative"
                      style={{
                        opacity: 0.8 + index * 0.08,
                        transform: `scale(${0.9 + index * 0.02})`,
                        background: `linear-gradient(to left, rgb(37, 99, 235) ${
                          (index * 100) / 5
                        }%, rgb(96, 165, 250) ${((index + 1) * 100) / 5}%, rgb(191, 219, 254) ${((index + 2) * 100) / 5}%)`
                      }}
                    >
                      {item.icon}
                      {/* Se for a √∫ltima fase, insere o container para os fogos */}
                      {index === evolutionData.length - 1 && (
                        <div ref={fireworksRef} className="absolute inset-0 pointer-events-none" />
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Elementos decorativos */}
      <div className="pointer-events-none absolute inset-0">
        <div className="absolute -top-40 left-0 h-96 w-96 rounded-full bg-blue-300/15 blur-[120px] animate-pulse" />
        <div className="absolute -bottom-40 right-0 h-96 w-96 rounded-full bg-blue-600/15 blur-[120px] animate-pulse" />
      </div>
    </section>
  );
}